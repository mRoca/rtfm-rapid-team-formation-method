image: docker:stable

services:
  - docker:dind

before_script:
  - if [ -x "$(command -v docker)" ]; then docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY; fi
  - apk add --no-cache make

stages:
  - test
  - build
  - deploy
  - post-deploy

test:
  stage: test
  script:
    - echo "Tests passed O:-)"

build:prod:
  stage: build
  script:
    - docker run --rm -w /srv -v `pwd`:/srv node:10.5-alpine sh -c "apk add --no-cache git && yarn install --frozen-lockfile && npm run-script slides"

    - docker pull $CI_REGISTRY/mroca/rtfm-rapid-team-formation-method:${CI_COMMIT_REF_NAME} || true
    - docker build -t $CI_REGISTRY/mroca/rtfm-rapid-team-formation-method:${CI_COMMIT_REF_NAME} .
    - docker push $CI_REGISTRY/mroca/rtfm-rapid-team-formation-method:${CI_COMMIT_REF_NAME}
  only:
    - develop
    - master
    - tags

deploy:uat:
  stage: deploy
  script:
    - echo "Deploying uat..."
  only:
    - develop

deploy:snapshot:
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  script:
    - echo "Deploying snapshot..."
    - ssh -A -o StrictHostKeyChecking=no "$SSH_SNAPSHOT_SERVER" "cd mroca-ami && ./update.sh"
  only:
    - master

deploy:prod:
  stage: deploy
  script:
    - echo "Deploying prod..."
  only:
    - tags

post-deploy:prod:
  stage: post-deploy
  script:
    - echo "Pushing queue messages..."
  only:
    - tags
